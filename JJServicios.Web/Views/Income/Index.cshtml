@using JJServicios.Web.Models

<h1>Entradas</h1>

@(Html.Kendo().Grid<IncomeExpenseViewModel>()
      .Name("grid")
      .HtmlAttributes(new { style = "height:500px;" })
      .Columns(columns =>
      {
          columns.Bound(c => c.Amount).Title("Cantidad");
          columns.Bound(c => c.Observations).Title("Observaciones");
          columns.Bound(c => c.MovementType).Title("Tipo de movimiento").Sortable(false).Filterable(filterable => filterable.Extra(false).UI("movementTypesFilter").Operators(operators => operators.ForString(str => str.Clear().Contains("Contiene")))
              );
          columns.Bound(c => c.CreatedDate).Hidden();
          columns.Bound(c => c.UpdateDate).Title("Fecha de actualización").ClientTemplate("#=kendo.toString(UpdateDate,'yyyy-MM-dd h:mm:ss tt')#").Filterable(filterable => filterable.Extra(true).Operators(operators => operators.ForDate(str => str.Clear()
          .IsGreaterThanOrEqualTo("Mayor o igual a")
          .IsLessThanOrEqualTo("Menor o igual a"))));
          columns.Command(command =>
          {
              command.Edit()
    .Text(" ").UpdateText(" ").CancelText(" ");
              command.Destroy().Text(" ");
          }).Width(160);
      })
      .ToolBar(toolbar =>
      {
          toolbar.Create().Text("Nuevo");
          toolbar.Excel().Text("Exportar a excel");
      })
      .Filterable()
      .Editable(editable => editable.Mode(GridEditMode.InLine))
      .Pageable()
      .Selectable(selectable =>
      {
          selectable.Mode(GridSelectionMode.Single);
          selectable.Type(GridSelectionType.Row);
      })
      .Sortable(sortable =>
      {
          sortable.SortMode(GridSortMode.SingleColumn);
      })
      .Scrollable()
       .Events(events =>
       {
           events.SaveChanges("onSaveChanges");
           events.Remove("onSaveChanges");
           events.Save("onSaveChanges");
           events.Edit("onSaveChanges");
       })
      .DataSource(dataSource => dataSource
          .Ajax()
          .Sort(sort => sort.Add("UpdateDate").Descending())
          .Model(model =>
          {
              model.Id(p => p.Id);
              model.Field(fld => fld.UpdateDate).Editable(false);
          })
          .Read(read => read.Action("Income_Read", "Income"))
          .Create(create => create.Action("Income_Create", "Income"))
          .Update(update => update.Action("Income_Update", "Income"))
          .Destroy(destroy => destroy.Action("Income_Destroy", "Income"))
      )
      )

<script type="text/javascript">

    $('#MovementTypeId').rules('add', {
        required: true,
        messages: {
            required: "Este campo es requerido"
        }
    });
</script>